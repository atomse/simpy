import os, sys
import numpy as np
import ase
import ase.io
from ase.neighborlist import NeighborList
from ase.neighborlist import neighbor_list

"""
H 0.31 C 0.76 O 0.66 N 0.71
"""

cutoff_table = {('H', 'H'):1.1, ('C', 'H'): 1.3, ('C', 'C'): 1.85, ('H', 'N'):1.3, ('N', 'N'):1.85, ('C', 'N'):1.85}
atp = {'C': 'opls_135', 'H': 'opls_140', 'N': 'opls_237'}

def get_lists(fname):
    atoms = ase.io.read(fname)

    # build neighbor list
    nl = []
    for i in range(len(atoms)):
        nl.append([])

    tokens_i, tokens_j = neighbor_list('ij', atoms, cutoff_table)
    for i in range(len(tokens_i)):
        nl[tokens_i[i]].append(tokens_j[i])

    # build bond list
    bond_list = []
    for i in range(len(nl)):
        if len(nl[i]) > 0:
            ai = i
            for j in range(len(nl[i])):
                aj = nl[i][j]
                if ai < aj:
                    bond_list.append([ai, aj])
    n_bond = len(bond_list)
    print(n_bond)

    angle_list = []
    # build angle list
    for i in range(len(nl)):
        if len(nl[i]) > 1:
            aj = i
            for j in range(len(nl[i])):
                ai = nl[i][j]
                for k in nl[i][j+1:]:
                    ak = k
                    angle_list.append([ai, aj, ak])
    n_angle = len(angle_list)
    print(n_angle)
    
    dihedral_list = []
    # build dihedral ist
    for i in bond_list:
        dj, dk = i[0], i[1]
        for j in nl[dj]:
            if j != dk:
                di = j
                for k in nl[dk]:
                    if k != dj:
                        dl = k
                        dihedral_list.append([di, dj, dk, dl])
    n_dihedral = len(dihedral_list)
    print(n_dihedral)
    return atoms, nl, bond_list, angle_list, dihedral_list

def to_itp(fname, atoms, nl, bl, al, dl):
    o = open(fname, "w")
    molname = fname.split(".")[0]
    chemical_symbols = atoms.get_chemical_symbols()
    masses = atoms.get_masses()
    charges = [0.0]*len(atoms)
    if os.path.exists(molname + ".q"):
        charges = np.loadtxt(molname + ".q")
    o.write("""
[ moleculetype ]
; Name		nrexcl
%s		3


[ atoms ]
;   nr      type   resnr residue    atom    cgnr      charge        mass
"""%molname)
    for i in range(len(atoms)):
        o.write("%6d    %s    1    %s"%((i+1), atp[chemical_symbols[i]], molname))
        o.write("%4s    1    %10.6f %8.4f\n"%(chemical_symbols[i], charges[i], masses[i]))

    o.write("""
[ bonds ]
;   ai    aj funct		c0		c1		c2		c3
""")
    for i in bl:
        o.write("%6d%6d    1\n"%(i[0]+1, i[1]+1))

    o.write("""
[ pairs ]
; ai		aj		ak		al		funct	 phi	 cp		 mult
""")
    for i in dl:
        o.write("%6d%6d\n"%(i[0]+1, i[3]+1))
    
    o.write("""
[ angles ]
;   ai    aj    ak funct		c0		c1		c2		c3
""")
    for i in al:
        o.write("%6d%6d%6d    1\n"%(i[0]+1, i[1]+1, i[2]+1))

    o.write("""
[ dihedrals ]
; ai		aj		ak		al		funct	 phi	 cp		 mult
""")
    for i in dl:
        o.write("%6d%6d%6d%6d    3\n"%(i[0]+1, i[1]+1, i[2]+1, i[3]+1))
    o.write("""
[ system ] 
;name 
%s

[ molecules ]
;      Compound     #mols 
%s   0
"""%(molname, molname))
    o.close()

if len(sys.argv) > 1:
    fname = sys.argv[1]
    atoms, nl, bl, al, dl = get_lists(fname)
    itpfile = fname.split(".")[0] + ".itp"
    to_itp(itpfile, atoms, nl, bl, al, dl)

